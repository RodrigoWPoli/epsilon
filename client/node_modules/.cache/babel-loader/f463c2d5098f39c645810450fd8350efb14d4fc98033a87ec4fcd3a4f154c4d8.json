{"ast":null,"code":"var _jsxFileName = \"/home/evolvy/react/epsilon/client/src/MessageForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageForm = () => {\n  _s();\n  const [backendData, setBackendData] = useState();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"/api\");\n        const data = await response.json();\n        setBackendData(data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n\n    // Set up an interval to fetch data every, for example, 5000 milliseconds (5 seconds)\n    const intervalId = setInterval(fetchData, 3000);\n\n    // Clean up the interval when the component unmounts or when you want to stop fetching\n    return () => clearInterval(intervalId);\n  }, []);\n  const [message, setMessage] = useState(\"\");\n  const [displayedMessage, setDisplayedMessage] = useState(\"\");\n  const [encryptedMessage, setEncryptedMessage] = useState(\"\");\n  const [encodedMessage, setEncodedMessage] = useState(\"\");\n  const [binaryMessage, setBinaryMessage] = useState(\"\");\n  const secretKey = \"your-secret-key\"; // Replace with a secure method for key exchange\n\n  const handleMessageChange = e => {\n    setMessage(e.target.value);\n  };\n  const encryptMessage = text => {\n    const encrypted = CryptoJS.AES.encrypt(text, secretKey).toString();\n    return encrypted;\n  };\n  const decryptMessage = encryptedText => {\n    const decrypted = CryptoJS.AES.decrypt(encryptedText, secretKey).toString(CryptoJS.enc.Utf8);\n    return decrypted;\n  };\n  const binarizeMessage = text => {\n    return text.split(\"\").map(char => char.charCodeAt(0).toString(2).padStart(8, \"0\")).join(\"\");\n  };\n  const deBinarizeMessage = text => {\n    const binaryArray = text.split(\" \");\n\n    // Convert each 8-bit binary byte to its decimal equivalent and then to a character\n    const textArray = binaryArray.map(binaryByte => {\n      const decimalValue = parseInt(binaryByte, 2);\n      return String.fromCharCode(decimalValue);\n    });\n\n    // Join the characters to form the original text\n    const originalText = textArray.join(\"\");\n    return originalText;\n  };\n  const sendMessage = async message => {\n    try {\n      // Send the binary message to the backend\n      const response = await fetch(\"/api/encode\", {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message\n        })\n      });\n\n      // Handle the response from the backend as needed\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const handleSendMessage = () => {\n    const encryptedMessage = encryptMessage(message);\n    const binaryMessage = binarizeMessage(encryptedMessage);\n    const encodedMessage = sendMessage(binaryMessage);\n\n    //receive from backend\n    const deBinarizedMessage = deBinarizeMessage(binaryMessage);\n    const decryptedMessage = decryptMessage(deBinarizedMessage);\n    setEncryptedMessage(encryptedMessage);\n    setBinaryMessage(binaryMessage);\n    setDisplayedMessage(decryptedMessage);\n    setEncodedMessage(encodedMessage);\n    setMessage(\"\");\n  };\n  const styles = {\n    messageContainer: {\n      margin: \"20px auto\",\n      border: \"2px solid #ddd\",\n      padding: \"10px\",\n      height: \"200px\",\n      maxWidth: \"400px\",\n      wordWrap: \"break-word\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"50px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"20px auto\"\n        },\n        children: \"backendData\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Write a message...\",\n        value: message,\n        onChange: handleMessageChange,\n        style: {\n          padding: \"10px\",\n          justifyContent: \"center\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        style: {\n          padding: \"10px\",\n          backgroundColor: \"#4CAF50\",\n          color: \"white\",\n          border: \"none\",\n          cursor: \"pointer\"\n        },\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"20px auto\"\n      },\n      children: \"Encrypted message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.messageContainer,\n      children: encryptedMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"20px auto\"\n      },\n      children: \"binary message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.messageContainer,\n      children: binaryMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"20px auto\"\n      },\n      children: \"Message received:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.messageContainer,\n      children: displayedMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageForm, \"xdPCALhGDts8NTUm74hj5aq2x1Q=\");\n_c = MessageForm;\nexport default MessageForm;\nvar _c;\n$RefreshReg$(_c, \"MessageForm\");","map":{"version":3,"names":["React","useEffect","useState","CryptoJS","jsxDEV","_jsxDEV","MessageForm","_s","backendData","setBackendData","fetchData","response","fetch","data","json","error","console","intervalId","setInterval","clearInterval","message","setMessage","displayedMessage","setDisplayedMessage","encryptedMessage","setEncryptedMessage","encodedMessage","setEncodedMessage","binaryMessage","setBinaryMessage","secretKey","handleMessageChange","e","target","value","encryptMessage","text","encrypted","AES","encrypt","toString","decryptMessage","encryptedText","decrypted","decrypt","enc","Utf8","binarizeMessage","split","map","char","charCodeAt","padStart","join","deBinarizeMessage","binaryArray","textArray","binaryByte","decimalValue","parseInt","String","fromCharCode","originalText","sendMessage","method","headers","body","JSON","stringify","handleSendMessage","deBinarizedMessage","decryptedMessage","styles","messageContainer","margin","border","padding","height","maxWidth","wordWrap","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","justifyContent","onClick","backgroundColor","color","cursor","_c","$RefreshReg$"],"sources":["/home/evolvy/react/epsilon/client/src/MessageForm.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport CryptoJS from \"crypto-js\";\n\nconst MessageForm = () => {\n  const [backendData, setBackendData] = useState();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"/api\");\n        const data = await response.json();\n        setBackendData(data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n\n    // Set up an interval to fetch data every, for example, 5000 milliseconds (5 seconds)\n    const intervalId = setInterval(fetchData, 3000);\n\n    // Clean up the interval when the component unmounts or when you want to stop fetching\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const [message, setMessage] = useState(\"\");\n  const [displayedMessage, setDisplayedMessage] = useState(\"\");\n  const [encryptedMessage, setEncryptedMessage] = useState(\"\");\n  const [encodedMessage, setEncodedMessage] = useState(\"\");\n  const [binaryMessage, setBinaryMessage] = useState(\"\");\n  const secretKey = \"your-secret-key\"; // Replace with a secure method for key exchange\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n  };\n\n  const encryptMessage = (text) => {\n    const encrypted = CryptoJS.AES.encrypt(text, secretKey).toString();\n    return encrypted;\n  };\n\n  const decryptMessage = (encryptedText) => {\n    const decrypted = CryptoJS.AES.decrypt(encryptedText, secretKey).toString(\n      CryptoJS.enc.Utf8\n    );\n    return decrypted;\n  };\n  const binarizeMessage = (text) => {\n    return text\n      .split(\"\")\n      .map((char) => char.charCodeAt(0).toString(2).padStart(8, \"0\"))\n      .join(\"\");\n  };\n  const deBinarizeMessage = (text) => {\n    const binaryArray = text.split(\" \");\n\n    // Convert each 8-bit binary byte to its decimal equivalent and then to a character\n    const textArray = binaryArray.map((binaryByte) => {\n      const decimalValue = parseInt(binaryByte, 2);\n      return String.fromCharCode(decimalValue);\n    });\n\n    // Join the characters to form the original text\n    const originalText = textArray.join(\"\");\n\n    return originalText;\n  };\n\n  const sendMessage = async (message) => {\n    try {\n      // Send the binary message to the backend\n      const response = await fetch(\"/api/encode\", {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({message}),\n      });\n\n      // Handle the response from the backend as needed\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const handleSendMessage = () => {\n    const encryptedMessage = encryptMessage(message);\n    const binaryMessage = binarizeMessage(encryptedMessage);\n    const encodedMessage = sendMessage(binaryMessage);\n\n    //receive from backend\n    const deBinarizedMessage = deBinarizeMessage(binaryMessage);\n    const decryptedMessage = decryptMessage(deBinarizedMessage);\n    setEncryptedMessage(encryptedMessage);\n    setBinaryMessage(binaryMessage);\n    setDisplayedMessage(decryptedMessage);\n    setEncodedMessage(encodedMessage)\n    setMessage(\"\");\n  };\n  const styles = {\n    messageContainer: {\n      margin: \"20px auto\",\n      border: \"2px solid #ddd\",\n      padding: \"10px\",\n      height: \"200px\",\n      maxWidth: \"400px\",\n      wordWrap: \"break-word\",\n    },\n  };\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n      <div>\n        <div style={{ margin: \"20px auto\" }}>backendData</div>\n        <input\n          type=\"text\"\n          placeholder=\"Write a message...\"\n          value={message}\n          onChange={handleMessageChange}\n          style={{ padding: \"10px\", justifyContent: \"center\" }}\n        />\n        <button\n          onClick={handleSendMessage}\n          style={{\n            padding: \"10px\",\n            backgroundColor: \"#4CAF50\",\n            color: \"white\",\n            border: \"none\",\n            cursor: \"pointer\",\n          }}\n        >\n          Send\n        </button>\n      </div>\n      <div style={{ margin: \"20px auto\" }}>Encrypted message:</div>\n      <div style={styles.messageContainer}>{encryptedMessage}</div>\n      <div style={{ margin: \"20px auto\" }}>binary message:</div>\n      <div style={styles.messageContainer}>{binaryMessage}</div>\n      <div style={{ margin: \"20px auto\" }}>Message received:</div>\n      <div style={styles.messageContainer}>{displayedMessage}</div>\n    </div>\n  );\n};\n\nexport default MessageForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}