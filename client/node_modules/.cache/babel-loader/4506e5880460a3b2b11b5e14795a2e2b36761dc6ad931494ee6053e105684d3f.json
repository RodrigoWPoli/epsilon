{"ast":null,"code":"var _jsxFileName = \"/home/evolvy/react/epsilon/client/src/MessageForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageForm = () => {\n  _s();\n  const [backendData, setBackendData] = useState();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"/api\");\n        const data = await response.json();\n        setBackendData(data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n\n    // Set up an interval to fetch data every, for example, 5000 milliseconds (5 seconds)\n    const intervalId = setInterval(fetchData, 3000);\n\n    // Clean up the interval when the component unmounts or when you want to stop fetching\n    return () => clearInterval(intervalId);\n  }, []);\n  const [message, setMessage] = useState(\"\");\n  const [displayedMessage, setDisplayedMessage] = useState(\"\");\n  const [encryptedMessage, setEncryptedMessage] = useState(\"\");\n  const [binaryMessage, setBinaryMessage] = useState(\"\");\n  const secretKey = \"your-secret-key\"; // Replace with a secure method for key exchange\n\n  const handleMessageChange = e => {\n    setMessage(e.target.value);\n  };\n  const encryptMessage = text => {\n    const encrypted = CryptoJS.AES.encrypt(text, secretKey).toString();\n    return encrypted;\n  };\n  const decryptMessage = encryptedText => {\n    const decrypted = CryptoJS.AES.decrypt(encryptedText, secretKey).toString(CryptoJS.enc.Utf8);\n    return decrypted;\n  };\n  const binariseMessage = text => {\n    const textEncoder = new TextEncoder();\n    const arrayBuffer = textEncoder.encode(text);\n    return Array.from(new Uint8Array(arrayBuffer));\n  };\n  const deBinarizeMessage = binaryArray => {\n    const uint8Array = new Uint8Array(binaryArray);\n    const textDecoder = new TextDecoder();\n    return textDecoder.decode(uint8Array);\n  };\n  const sendMessage = async message => {\n    const uint8Array = new Uint8Array(binaryMessage);\n    const blob = new Blob([uint8Array]);\n    const formData = new FormData();\n    formData.append('binaryMessage', blob, 'binaryMessage');\n    try {\n      // Send the binary message to the backend\n      const response = await fetch(\"/api/sendBinaryMessage\", {\n        method: \"POST\",\n        body: formData\n      });\n\n      // Handle the response from the backend as needed\n      const data = await response.json();\n      console.log('Response from backend:', data);\n    } catch (error) {\n      console.error(\"Error sending binary message:\", error);\n    }\n  };\n  const handleSendMessage = () => {\n    const encryptedMessage = encryptMessage(message);\n    const binaryMessage = binariseMessage(encryptedMessage);\n    //send to backend\n    sendMessage(binaryMessage);\n\n    //receive from backend\n    const deBinarizedMessage = deBinarizeMessage(binaryMessage);\n    const decryptedMessage = decryptMessage(deBinarizedMessage);\n    setEncryptedMessage(encryptedMessage);\n    setBinaryMessage(binaryMessage);\n    setDisplayedMessage(decryptedMessage);\n    setMessage(\"\");\n  };\n  const styles = {\n    messageContainer: {\n      margin: \"20px auto\",\n      border: \"2px solid #ddd\",\n      padding: \"10px\",\n      height: \"200px\",\n      maxWidth: \"400px\",\n      wordWrap: \"break-word\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      marginTop: \"50px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"20px auto\"\n        },\n        children: \"backendData\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Write a message...\",\n        value: message,\n        onChange: handleMessageChange,\n        style: {\n          padding: \"10px\",\n          justifyContent: \"center\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        style: {\n          padding: \"10px\",\n          backgroundColor: \"#4CAF50\",\n          color: \"white\",\n          border: \"none\",\n          cursor: \"pointer\"\n        },\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"20px auto\"\n      },\n      children: \"Encrypted message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.messageContainer,\n      children: encryptedMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"20px auto\"\n      },\n      children: \"binary message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.messageContainer,\n      children: binaryMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"20px auto\"\n      },\n      children: \"Message received:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.messageContainer,\n      children: displayedMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageForm, \"9Ck3VIzkST4OdArWjRp8BoNBdak=\");\n_c = MessageForm;\nexport default MessageForm;\nvar _c;\n$RefreshReg$(_c, \"MessageForm\");","map":{"version":3,"names":["React","useEffect","useState","CryptoJS","jsxDEV","_jsxDEV","MessageForm","_s","backendData","setBackendData","fetchData","response","fetch","data","json","error","console","intervalId","setInterval","clearInterval","message","setMessage","displayedMessage","setDisplayedMessage","encryptedMessage","setEncryptedMessage","binaryMessage","setBinaryMessage","secretKey","handleMessageChange","e","target","value","encryptMessage","text","encrypted","AES","encrypt","toString","decryptMessage","encryptedText","decrypted","decrypt","enc","Utf8","binariseMessage","textEncoder","TextEncoder","arrayBuffer","encode","Array","from","Uint8Array","deBinarizeMessage","binaryArray","uint8Array","textDecoder","TextDecoder","decode","sendMessage","blob","Blob","formData","FormData","append","method","body","log","handleSendMessage","deBinarizedMessage","decryptedMessage","styles","messageContainer","margin","border","padding","height","maxWidth","wordWrap","style","textAlign","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","justifyContent","onClick","backgroundColor","color","cursor","_c","$RefreshReg$"],"sources":["/home/evolvy/react/epsilon/client/src/MessageForm.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport CryptoJS from \"crypto-js\";\n\nconst MessageForm = () => {\n  const [backendData, setBackendData] = useState();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"/api\");\n        const data = await response.json();\n        setBackendData(data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n\n    // Set up an interval to fetch data every, for example, 5000 milliseconds (5 seconds)\n    const intervalId = setInterval(fetchData, 3000);\n\n    // Clean up the interval when the component unmounts or when you want to stop fetching\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const [message, setMessage] = useState(\"\");\n  const [displayedMessage, setDisplayedMessage] = useState(\"\");\n  const [encryptedMessage, setEncryptedMessage] = useState(\"\");\n  const [binaryMessage, setBinaryMessage] = useState(\"\");\n  const secretKey = \"your-secret-key\"; // Replace with a secure method for key exchange\n\n  const handleMessageChange = (e) => {\n    setMessage(e.target.value);\n  };\n\n  const encryptMessage = (text) => {\n    const encrypted = CryptoJS.AES.encrypt(text, secretKey).toString();\n    return encrypted;\n  };\n\n  const decryptMessage = (encryptedText) => {\n    const decrypted = CryptoJS.AES.decrypt(encryptedText, secretKey).toString(\n      CryptoJS.enc.Utf8\n    );\n    return decrypted;\n  };\n  const binariseMessage = (text) => {\n    const textEncoder = new TextEncoder();\n    const arrayBuffer = textEncoder.encode(text);\n    return Array.from(new Uint8Array(arrayBuffer));\n  };\n  const deBinarizeMessage = (binaryArray) => {\n  const uint8Array = new Uint8Array(binaryArray);\n  const textDecoder = new TextDecoder();\n  return textDecoder.decode(uint8Array);\n  };\n\n  const sendMessage = async (message) => {\n    const uint8Array = new Uint8Array(binaryMessage);\n    const blob = new Blob([uint8Array]);\n    const formData = new FormData();\n    formData.append('binaryMessage', blob, 'binaryMessage');\n\n  try {\n    // Send the binary message to the backend\n    const response = await fetch(\"/api/sendBinaryMessage\", {\n      method: \"POST\",\n      body: formData,\n    });\n\n    // Handle the response from the backend as needed\n    const data = await response.json();\n    console.log('Response from backend:', data);\n  } catch (error) {\n    console.error(\"Error sending binary message:\", error);\n  }\n\n  };\n\n  const handleSendMessage = () => {\n    const encryptedMessage = encryptMessage(message);\n    const binaryMessage = binariseMessage(encryptedMessage);\n    //send to backend\n    sendMessage(binaryMessage);\n\n\n    //receive from backend\n    const deBinarizedMessage = deBinarizeMessage(binaryMessage);\n    const decryptedMessage = decryptMessage(deBinarizedMessage);\n    setEncryptedMessage(encryptedMessage);\n    setBinaryMessage(binaryMessage);\n    setDisplayedMessage(decryptedMessage);\n    setMessage(\"\");\n  };\n  const styles = {\n    messageContainer: {\n      margin: \"20px auto\",\n      border: \"2px solid #ddd\",\n      padding: \"10px\",\n      height: \"200px\",\n      maxWidth: \"400px\",\n      wordWrap: \"break-word\",\n    },\n  };\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"50px\" }}>\n      <div>\n        <div style={{ margin: \"20px auto\" }}>backendData</div>\n        <input\n          type=\"text\"\n          placeholder=\"Write a message...\"\n          value={message}\n          onChange={handleMessageChange}\n          style={{ padding: \"10px\", justifyContent: \"center\" }}\n        />\n        <button\n          onClick={handleSendMessage}\n          style={{\n            padding: \"10px\",\n            backgroundColor: \"#4CAF50\",\n            color: \"white\",\n            border: \"none\",\n            cursor: \"pointer\",\n          }}\n        >\n          Send\n        </button>\n      </div>\n      <div style={{ margin: \"20px auto\" }}>Encrypted message:</div>\n      <div style={styles.messageContainer}>{encryptedMessage}</div>\n      <div style={{ margin: \"20px auto\" }}>binary message:</div>\n      <div style={styles.messageContainer}>{binaryMessage}</div>\n      <div style={{ margin: \"20px auto\" }}>Message received:</div>\n      <div style={styles.messageContainer}>{displayedMessage}</div>\n    </div>\n  );\n};\n\nexport default MessageForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}