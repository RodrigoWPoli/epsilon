{"ast":null,"code":"var _jsxFileName = \"/home/evolvy/react/epsilon/client/src/MessageForm.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport CryptoJS from 'crypto-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageForm = () => {\n  _s();\n  const [backendData, setBackendData] = useState([{}]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"/api\");\n        const data = await response.json();\n        setBackendData(data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n\n    // Set up an interval to fetch data every, for example, 5000 milliseconds (5 seconds)\n    const intervalId = setInterval(fetchData, 3000);\n\n    // Clean up the interval when the component unmounts or when you want to stop fetching\n    return () => clearInterval(intervalId);\n  }, []);\n  const [message, setMessage] = useState('');\n  const [displayedMessage, setDisplayedMessage] = useState('');\n  const [encryptedMessage, setEncryptedMessage] = useState('');\n  const secretKey = 'your-secret-key'; // Replace with a secure method for key exchange\n\n  const handleMessageChange = e => {\n    setMessage(e.target.value);\n  };\n  const encryptMessage = text => {\n    const encrypted = CryptoJS.AES.encrypt(text, secretKey).toString();\n    return encrypted;\n  };\n  const decryptMessage = encryptedText => {\n    const decrypted = CryptoJS.AES.decrypt(encryptedText, secretKey).toString(CryptoJS.enc.Utf8);\n    return decrypted;\n  };\n  const handleSendMessage = () => {\n    const encryptedMessage = encryptMessage(message);\n\n    // Simulate receiving the encrypted message on the other end\n    const decryptedMessage = decryptMessage(encryptedMessage);\n    setEncryptedMessage(encryptedMessage);\n    setDisplayedMessage(decryptedMessage);\n    setMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '50px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '20px auto'\n        },\n        children: \"backendData\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Write a message...\",\n        value: message,\n        onChange: handleMessageChange,\n        style: {\n          padding: '10px',\n          justifyContent: 'center'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        style: {\n          padding: '10px',\n          backgroundColor: '#4CAF50',\n          color: 'white',\n          border: 'none',\n          cursor: 'pointer'\n        },\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '20px auto'\n      },\n      children: \"Encrypted message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '20px auto',\n        border: '2px solid #ddd',\n        padding: '10px',\n        height: '200px',\n        maxWidth: '400px',\n        wordWrap: 'break-word'\n      },\n      children: encryptedMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: encryptedMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 30\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '20px auto'\n      },\n      children: \"Message received:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: '20px auto',\n        border: '2px solid #ddd',\n        padding: '10px',\n        height: '200px',\n        maxWidth: '400px',\n        wordWrap: 'break-word'\n      },\n      children: typeof backendData.users === 'undefined' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this) : backendData.users.map((user, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: user\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageForm, \"7kzzgWEz0HGSkvmsRwuGMDDOrcg=\");\n_c = MessageForm;\nexport default MessageForm;\nvar _c;\n$RefreshReg$(_c, \"MessageForm\");","map":{"version":3,"names":["React","useEffect","useState","CryptoJS","jsxDEV","_jsxDEV","MessageForm","_s","backendData","setBackendData","fetchData","response","fetch","data","json","error","console","intervalId","setInterval","clearInterval","message","setMessage","displayedMessage","setDisplayedMessage","encryptedMessage","setEncryptedMessage","secretKey","handleMessageChange","e","target","value","encryptMessage","text","encrypted","AES","encrypt","toString","decryptMessage","encryptedText","decrypted","decrypt","enc","Utf8","handleSendMessage","decryptedMessage","style","textAlign","marginTop","children","margin","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","padding","justifyContent","onClick","backgroundColor","color","border","cursor","height","maxWidth","wordWrap","users","map","user","i","_c","$RefreshReg$"],"sources":["/home/evolvy/react/epsilon/client/src/MessageForm.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport CryptoJS from 'crypto-js';\n\nconst MessageForm = () => {\n  const [backendData, setBackendData] = useState([{}]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"/api\");\n        const data = await response.json();\n        setBackendData(data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  \n    // Set up an interval to fetch data every, for example, 5000 milliseconds (5 seconds)\n    const intervalId = setInterval(fetchData, 3000);\n  \n    // Clean up the interval when the component unmounts or when you want to stop fetching\n    return () => clearInterval(intervalId);\n  }, []);\n  \n\n  const [message, setMessage] = useState('');\n  const [displayedMessage, setDisplayedMessage] = useState('');\n  const [encryptedMessage, setEncryptedMessage] = useState('');\n  const secretKey = 'your-secret-key'; // Replace with a secure method for key exchange\n\n  const handleMessageChange = (e: { target: { value: React.SetStateAction<string>; }; }) => {\n    setMessage(e.target.value);\n  };\n\n  const encryptMessage = (text: string) => {\n    const encrypted = CryptoJS.AES.encrypt(text, secretKey).toString();\n    return encrypted;\n  };\n\n  const decryptMessage = (encryptedText: any) => {\n    const decrypted = CryptoJS.AES.decrypt(encryptedText, secretKey).toString(CryptoJS.enc.Utf8);\n    return decrypted;\n  };\n\n  const handleSendMessage = () => {\n    const encryptedMessage = encryptMessage(message);\n\n    \n\n    // Simulate receiving the encrypted message on the other end\n    const decryptedMessage = decryptMessage(encryptedMessage);\n\n    setEncryptedMessage(encryptedMessage);\n    setDisplayedMessage(decryptedMessage);\n    setMessage('');\n  };\n\n  return (\n    <div style={{ textAlign: 'center', marginTop: '50px' }}>\n      <div>\n        <div style={{ margin: '20px auto' }}>backendData</div>\n        <input\n          type=\"text\"\n          placeholder=\"Write a message...\"\n          value={message}\n          onChange={handleMessageChange}\n          style={{ padding: '10px', justifyContent: 'center' }}\n        />\n        <button\n          onClick={handleSendMessage}\n          style={{ padding: '10px', backgroundColor: '#4CAF50', color: 'white', border: 'none', cursor: 'pointer' }}\n        >\n          Send\n        </button>\n      </div>\n      <div style={{ margin: '20px auto' }}>Encrypted message:</div>\n      <div style={{ margin: '20px auto', border: '2px solid #ddd', padding: '10px', height: '200px', maxWidth: '400px', wordWrap: 'break-word' }}>\n        {encryptedMessage && <p>{encryptedMessage}</p>}\n      </div>\n      <div style={{ margin: '20px auto' }}>Message received:</div>\n      <div style={{ margin: '20px auto', border: '2px solid #ddd', padding: '10px', height: '200px', maxWidth: '400px', wordWrap: 'break-word' }}>\n        {(typeof backendData.users === 'undefined') ? (\n          <p>Loading...</p>\n          ) : (\n            backendData.users.map((user: string, i: any) => (\n              <p key={i}>{user}</p>\n            ))\n          )}\n      </div>\n    </div>\n  );\n};\n\nexport default MessageForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}